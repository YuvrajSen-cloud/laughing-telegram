// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: wolong/map/v2/map.proto

package mapv2

import (
	v2 "git.fiblab.net/sim/simulet-go/gen/proto/go/wolong/geo/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LaneType int32

const (
	LaneType_LANE_TYPE_UNSPECIFIED LaneType = 0
	// 行车
	LaneType_LANE_TYPE_DRIVING LaneType = 1
	// 步行
	LaneType_LANE_TYPE_WALKING LaneType = 2
)

// Enum value maps for LaneType.
var (
	LaneType_name = map[int32]string{
		0: "LANE_TYPE_UNSPECIFIED",
		1: "LANE_TYPE_DRIVING",
		2: "LANE_TYPE_WALKING",
	}
	LaneType_value = map[string]int32{
		"LANE_TYPE_UNSPECIFIED": 0,
		"LANE_TYPE_DRIVING":     1,
		"LANE_TYPE_WALKING":     2,
	}
)

func (x LaneType) Enum() *LaneType {
	p := new(LaneType)
	*p = x
	return p
}

func (x LaneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaneType) Descriptor() protoreflect.EnumDescriptor {
	return file_wolong_map_v2_map_proto_enumTypes[0].Descriptor()
}

func (LaneType) Type() protoreflect.EnumType {
	return &file_wolong_map_v2_map_proto_enumTypes[0]
}

func (x LaneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaneType.Descriptor instead.
func (LaneType) EnumDescriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{0}
}

type LaneTurn int32

const (
	LaneTurn_LANE_TURN_UNSPECIFIED LaneTurn = 0
	// 直行
	LaneTurn_LANE_TURN_STRAIGHT LaneTurn = 1
	// 左转
	LaneTurn_LANE_TURN_LEFT LaneTurn = 2
	// 右转
	LaneTurn_LANE_TURN_RIGHT LaneTurn = 3
	// 掉头
	LaneTurn_LANE_TURN_AROUND LaneTurn = 4
)

// Enum value maps for LaneTurn.
var (
	LaneTurn_name = map[int32]string{
		0: "LANE_TURN_UNSPECIFIED",
		1: "LANE_TURN_STRAIGHT",
		2: "LANE_TURN_LEFT",
		3: "LANE_TURN_RIGHT",
		4: "LANE_TURN_AROUND",
	}
	LaneTurn_value = map[string]int32{
		"LANE_TURN_UNSPECIFIED": 0,
		"LANE_TURN_STRAIGHT":    1,
		"LANE_TURN_LEFT":        2,
		"LANE_TURN_RIGHT":       3,
		"LANE_TURN_AROUND":      4,
	}
)

func (x LaneTurn) Enum() *LaneTurn {
	p := new(LaneTurn)
	*p = x
	return p
}

func (x LaneTurn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaneTurn) Descriptor() protoreflect.EnumDescriptor {
	return file_wolong_map_v2_map_proto_enumTypes[1].Descriptor()
}

func (LaneTurn) Type() protoreflect.EnumType {
	return &file_wolong_map_v2_map_proto_enumTypes[1]
}

func (x LaneTurn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaneTurn.Descriptor instead.
func (LaneTurn) EnumDescriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{1}
}

type LaneConnectionType int32

const (
	LaneConnectionType_LANE_CONNECTION_TYPE_UNSPECIFIED LaneConnectionType = 0
	// 连接处为道路开头
	LaneConnectionType_LANE_CONNECTION_TYPE_HEAD LaneConnectionType = 1
	// 连接处为道路结尾
	LaneConnectionType_LANE_CONNECTION_TYPE_TAIL LaneConnectionType = 2
)

// Enum value maps for LaneConnectionType.
var (
	LaneConnectionType_name = map[int32]string{
		0: "LANE_CONNECTION_TYPE_UNSPECIFIED",
		1: "LANE_CONNECTION_TYPE_HEAD",
		2: "LANE_CONNECTION_TYPE_TAIL",
	}
	LaneConnectionType_value = map[string]int32{
		"LANE_CONNECTION_TYPE_UNSPECIFIED": 0,
		"LANE_CONNECTION_TYPE_HEAD":        1,
		"LANE_CONNECTION_TYPE_TAIL":        2,
	}
)

func (x LaneConnectionType) Enum() *LaneConnectionType {
	p := new(LaneConnectionType)
	*p = x
	return p
}

func (x LaneConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaneConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_wolong_map_v2_map_proto_enumTypes[2].Descriptor()
}

func (LaneConnectionType) Type() protoreflect.EnumType {
	return &file_wolong_map_v2_map_proto_enumTypes[2]
}

func (x LaneConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaneConnectionType.Descriptor instead.
func (LaneConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{2}
}

// TODO(张钧): 参照腾讯地图的分类与模拟任务的需要进行丰富
type AoiType int32

const (
	AoiType_AOI_TYPE_UNSPECIFIED AoiType = 0
	AoiType_AOI_TYPE_BUS_STATION AoiType = 1
	AoiType_AOI_TYPE_OTHER       AoiType = 2
)

// Enum value maps for AoiType.
var (
	AoiType_name = map[int32]string{
		0: "AOI_TYPE_UNSPECIFIED",
		1: "AOI_TYPE_BUS_STATION",
		2: "AOI_TYPE_OTHER",
	}
	AoiType_value = map[string]int32{
		"AOI_TYPE_UNSPECIFIED": 0,
		"AOI_TYPE_BUS_STATION": 1,
		"AOI_TYPE_OTHER":       2,
	}
)

func (x AoiType) Enum() *AoiType {
	p := new(AoiType)
	*p = x
	return p
}

func (x AoiType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AoiType) Descriptor() protoreflect.EnumDescriptor {
	return file_wolong_map_v2_map_proto_enumTypes[3].Descriptor()
}

func (AoiType) Type() protoreflect.EnumType {
	return &file_wolong_map_v2_map_proto_enumTypes[3]
}

func (x AoiType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AoiType.Descriptor instead.
func (AoiType) EnumDescriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{3}
}

// 折线，用于定义车道等的形状
type Polyline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*v2.XYPosition `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" yaml:"nodes" bson:"nodes" db:"nodes"`
}

func (x *Polyline) Reset() {
	*x = Polyline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolong_map_v2_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polyline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polyline) ProtoMessage() {}

func (x *Polyline) ProtoReflect() protoreflect.Message {
	mi := &file_wolong_map_v2_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polyline.ProtoReflect.Descriptor instead.
func (*Polyline) Descriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{0}
}

func (x *Polyline) GetNodes() []*v2.XYPosition {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// 地图元信息
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地图名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name" bson:"name" db:"name"`
	// 地图创建时间
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty" yaml:"date" bson:"date" db:"date"`
	// 地图边界的xy坐标
	North float64 `protobuf:"fixed64,3,opt,name=north,proto3" json:"north,omitempty" yaml:"north" bson:"north" db:"north"`
	South float64 `protobuf:"fixed64,4,opt,name=south,proto3" json:"south,omitempty" yaml:"south" bson:"south" db:"south"`
	East  float64 `protobuf:"fixed64,5,opt,name=east,proto3" json:"east,omitempty" yaml:"east" bson:"east" db:"east"`
	West  float64 `protobuf:"fixed64,6,opt,name=west,proto3" json:"west,omitempty" yaml:"west" bson:"west" db:"west"`
	// PROJ.4 投影字符串，用以支持xy坐标到其他坐标系的转换
	Projection string `protobuf:"bytes,7,opt,name=projection,proto3" json:"projection,omitempty" bson:"projection" db:"projection" yaml:"projection"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolong_map_v2_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_wolong_map_v2_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{1}
}

func (x *Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Header) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Header) GetNorth() float64 {
	if x != nil {
		return x.North
	}
	return 0
}

func (x *Header) GetSouth() float64 {
	if x != nil {
		return x.South
	}
	return 0
}

func (x *Header) GetEast() float64 {
	if x != nil {
		return x.East
	}
	return 0
}

func (x *Header) GetWest() float64 {
	if x != nil {
		return x.West
	}
	return 0
}

func (x *Header) GetProjection() string {
	if x != nil {
		return x.Projection
	}
	return ""
}

// 两个lane的冲突区域
type LaneOverlap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 冲突点在本车道上的坐标
	Self *v2.LanePosition `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty" yaml:"self" bson:"self" db:"self"`
	// 冲突点在冲突车道上的坐标
	Other *v2.LanePosition `protobuf:"bytes,2,opt,name=other,proto3" json:"other,omitempty" yaml:"other" bson:"other" db:"other"`
	// 本车道是否有优先通行权
	SelfFirst bool `protobuf:"varint,3,opt,name=self_first,json=selfFirst,proto3" json:"self_first,omitempty" db:"self_first" yaml:"self_first" bson:"self_first"`
}

func (x *LaneOverlap) Reset() {
	*x = LaneOverlap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolong_map_v2_map_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaneOverlap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaneOverlap) ProtoMessage() {}

func (x *LaneOverlap) ProtoReflect() protoreflect.Message {
	mi := &file_wolong_map_v2_map_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaneOverlap.ProtoReflect.Descriptor instead.
func (*LaneOverlap) Descriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{2}
}

func (x *LaneOverlap) GetSelf() *v2.LanePosition {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *LaneOverlap) GetOther() *v2.LanePosition {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *LaneOverlap) GetSelfFirst() bool {
	if x != nil {
		return x.SelfFirst
	}
	return false
}

type LaneConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 所连接的车道Lane的ID
	Id   int32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id" bson:"id" db:"id"`
	Type LaneConnectionType `protobuf:"varint,2,opt,name=type,proto3,enum=wolong.map.v2.LaneConnectionType" json:"type,omitempty" db:"type" yaml:"type" bson:"type"`
}

func (x *LaneConnection) Reset() {
	*x = LaneConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolong_map_v2_map_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaneConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaneConnection) ProtoMessage() {}

func (x *LaneConnection) ProtoReflect() protoreflect.Message {
	mi := &file_wolong_map_v2_map_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaneConnection.ProtoReflect.Descriptor instead.
func (*LaneConnection) Descriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{3}
}

func (x *LaneConnection) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LaneConnection) GetType() LaneConnectionType {
	if x != nil {
		return x.Type
	}
	return LaneConnectionType_LANE_CONNECTION_TYPE_UNSPECIFIED
}

type Lane struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id" bson:"id" db:"id"`
	Type LaneType `protobuf:"varint,2,opt,name=type,proto3,enum=wolong.map.v2.LaneType" json:"type,omitempty" yaml:"type" bson:"type" db:"type"`
	Turn LaneTurn `protobuf:"varint,3,opt,name=turn,proto3,enum=wolong.map.v2.LaneTurn" json:"turn,omitempty" yaml:"turn" bson:"turn" db:"turn"`
	// 限速 (m/s)
	MaxSpeed float64 `protobuf:"fixed64,4,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty" yaml:"max_speed" bson:"max_speed" db:"max_speed"`
	// 中心线长度（单位：米）
	Length float64 `protobuf:"fixed64,5,opt,name=length,proto3" json:"length,omitempty" yaml:"length" bson:"length" db:"length"`
	Width  float64 `protobuf:"fixed64,6,opt,name=width,proto3" json:"width,omitempty" yaml:"width" bson:"width" db:"width"`
	// 车道中心线（车辆/行车轨迹线）
	CenterLine *Polyline `protobuf:"bytes,7,opt,name=center_line,json=centerLine,proto3" json:"center_line,omitempty" yaml:"center_line" bson:"center_line" db:"center_line"`
	// 车道左边界线
	LeftBorderLine *Polyline `protobuf:"bytes,8,opt,name=left_border_line,json=leftBorderLine,proto3" json:"left_border_line,omitempty" yaml:"left_border_line" bson:"left_border_line" db:"left_border_line"`
	// 车道右边界线
	RightBorderLine *Polyline `protobuf:"bytes,9,opt,name=right_border_line,json=rightBorderLine,proto3" json:"right_border_line,omitempty" yaml:"right_border_line" bson:"right_border_line" db:"right_border_line"`
	// Lanes can drive / walk from
	// 对于Junction内的车道至多1个前驱
	// 对于LANE_TYPE_DRIVING，连接类型必为LANE_CONNECTION_TYPE_TAIL
	// 对于LANE_TYPE_WALKING连接类型两种都有可能
	Predecessors []*LaneConnection `protobuf:"bytes,10,rep,name=predecessors,proto3" json:"predecessors,omitempty" yaml:"predecessors" bson:"predecessors" db:"predecessors"`
	// Lanes can drive / walk to
	// 对于Junction内的车道至多1个后继
	// 对于LANE_TYPE_DRIVING，连接类型必为LANE_CONNECTION_TYPE_HEAD
	// 对于LANE_TYPE_WALKING连接类型两种都有可能
	Successors []*LaneConnection `protobuf:"bytes,11,rep,name=successors,proto3" json:"successors,omitempty" yaml:"successors" bson:"successors" db:"successors"`
	// 左侧相邻车道（按从近到远排列）
	LeftLaneIds []int32 `protobuf:"varint,12,rep,packed,name=left_lane_ids,json=leftLaneIds,proto3" json:"left_lane_ids,omitempty" bson:"left_lane_ids" db:"left_lane_ids" yaml:"left_lane_ids"`
	// 右侧相邻车道（按从近到远排列）
	RightLaneIds []int32 `protobuf:"varint,13,rep,packed,name=right_lane_ids,json=rightLaneIds,proto3" json:"right_lane_ids,omitempty" yaml:"right_lane_ids" bson:"right_lane_ids" db:"right_lane_ids"`
	// 所属的道路road id或路口junction id
	ParentId int32 `protobuf:"varint,14,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" yaml:"parent_id" bson:"parent_id" db:"parent_id"`
	// 车道之间的冲突点（仅在Junction内有效），保证按照self_s从小到大排序
	Overlaps []*LaneOverlap `protobuf:"bytes,15,rep,name=overlaps,proto3" json:"overlaps,omitempty" bson:"overlaps" db:"overlaps" yaml:"overlaps"`
	// 连接到该车道的所有AOI
	AoiIds []int32 `protobuf:"varint,16,rep,packed,name=aoi_ids,json=aoiIds,proto3" json:"aoi_ids,omitempty" yaml:"aoi_ids" bson:"aoi_ids" db:"aoi_ids"`
}

func (x *Lane) Reset() {
	*x = Lane{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolong_map_v2_map_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lane) ProtoMessage() {}

func (x *Lane) ProtoReflect() protoreflect.Message {
	mi := &file_wolong_map_v2_map_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lane.ProtoReflect.Descriptor instead.
func (*Lane) Descriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{4}
}

func (x *Lane) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lane) GetType() LaneType {
	if x != nil {
		return x.Type
	}
	return LaneType_LANE_TYPE_UNSPECIFIED
}

func (x *Lane) GetTurn() LaneTurn {
	if x != nil {
		return x.Turn
	}
	return LaneTurn_LANE_TURN_UNSPECIFIED
}

func (x *Lane) GetMaxSpeed() float64 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *Lane) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Lane) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Lane) GetCenterLine() *Polyline {
	if x != nil {
		return x.CenterLine
	}
	return nil
}

func (x *Lane) GetLeftBorderLine() *Polyline {
	if x != nil {
		return x.LeftBorderLine
	}
	return nil
}

func (x *Lane) GetRightBorderLine() *Polyline {
	if x != nil {
		return x.RightBorderLine
	}
	return nil
}

func (x *Lane) GetPredecessors() []*LaneConnection {
	if x != nil {
		return x.Predecessors
	}
	return nil
}

func (x *Lane) GetSuccessors() []*LaneConnection {
	if x != nil {
		return x.Successors
	}
	return nil
}

func (x *Lane) GetLeftLaneIds() []int32 {
	if x != nil {
		return x.LeftLaneIds
	}
	return nil
}

func (x *Lane) GetRightLaneIds() []int32 {
	if x != nil {
		return x.RightLaneIds
	}
	return nil
}

func (x *Lane) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Lane) GetOverlaps() []*LaneOverlap {
	if x != nil {
		return x.Overlaps
	}
	return nil
}

func (x *Lane) GetAoiIds() []int32 {
	if x != nil {
		return x.AoiIds
	}
	return nil
}

type Road struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id" bson:"id" db:"id"`
	// 属于该道路Road的所有车道/人行道等lane
	// lane_id是按从最左侧车道到最右侧车道(从前进方向来看)的顺序给出的
	LaneIds []int32 `protobuf:"varint,2,rep,packed,name=lane_ids,json=laneIds,proto3" json:"lane_ids,omitempty" yaml:"lane_ids" bson:"lane_ids" db:"lane_ids"`
}

func (x *Road) Reset() {
	*x = Road{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolong_map_v2_map_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Road) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Road) ProtoMessage() {}

func (x *Road) ProtoReflect() protoreflect.Message {
	mi := &file_wolong_map_v2_map_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Road.ProtoReflect.Descriptor instead.
func (*Road) Descriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{5}
}

func (x *Road) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Road) GetLaneIds() []int32 {
	if x != nil {
		return x.LaneIds
	}
	return nil
}

type Junction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id" yaml:"id" bson:"id"`
	// 属于该路口Junction的所有车道/人行道等lane
	LaneIds []int32 `protobuf:"varint,2,rep,packed,name=lane_ids,json=laneIds,proto3" json:"lane_ids,omitempty" db:"lane_ids" yaml:"lane_ids" bson:"lane_ids"`
}

func (x *Junction) Reset() {
	*x = Junction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolong_map_v2_map_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Junction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Junction) ProtoMessage() {}

func (x *Junction) ProtoReflect() protoreflect.Message {
	mi := &file_wolong_map_v2_map_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Junction.ProtoReflect.Descriptor instead.
func (*Junction) Descriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{6}
}

func (x *Junction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Junction) GetLaneIds() []int32 {
	if x != nil {
		return x.LaneIds
	}
	return nil
}

type Aoi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id" yaml:"id" bson:"id"`
	Type AoiType `protobuf:"varint,2,opt,name=type,proto3,enum=wolong.map.v2.AoiType" json:"type,omitempty" db:"type" yaml:"type" bson:"type"`
	// Aoi与行车路网的连接点
	DrivingPositions []*v2.LanePosition `protobuf:"bytes,3,rep,name=driving_positions,json=drivingPositions,proto3" json:"driving_positions,omitempty" yaml:"driving_positions" bson:"driving_positions" db:"driving_positions"`
	// Aoi与步行路网的连接点
	WalkingPositions []*v2.LanePosition `protobuf:"bytes,4,rep,name=walking_positions,json=walkingPositions,proto3" json:"walking_positions,omitempty" yaml:"walking_positions" bson:"walking_positions" db:"walking_positions"`
	// Aoi原始位置（如果只有一个值，则为Aoi所在的点，否则为Aoi多边形的边界）
	Positions []*v2.XYPosition `protobuf:"bytes,5,rep,name=positions,proto3" json:"positions,omitempty" yaml:"positions" bson:"positions" db:"positions"`
	// Aoi与行车路网连接时在自身边界上的连接点, 与driving_positions按索引一一对应
	DrivingGates []*v2.XYPosition `protobuf:"bytes,6,rep,name=driving_gates,json=drivingGates,proto3" json:"driving_gates,omitempty" db:"driving_gates" yaml:"driving_gates" bson:"driving_gates"`
	// Aoi与步行路网连接时在自身边界上的连接点, 与walking_positions按索引一一对应
	WalkingGates []*v2.XYPosition `protobuf:"bytes,7,rep,name=walking_gates,json=walkingGates,proto3" json:"walking_gates,omitempty" yaml:"walking_gates" bson:"walking_gates" db:"walking_gates"`
	// Aoi面积, 若是Poi则无此字段
	Area *float64 `protobuf:"fixed64,8,opt,name=area,proto3,oneof" json:"area,omitempty" yaml:"area" bson:"area" db:"area"`
}

func (x *Aoi) Reset() {
	*x = Aoi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolong_map_v2_map_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aoi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aoi) ProtoMessage() {}

func (x *Aoi) ProtoReflect() protoreflect.Message {
	mi := &file_wolong_map_v2_map_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aoi.ProtoReflect.Descriptor instead.
func (*Aoi) Descriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{7}
}

func (x *Aoi) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Aoi) GetType() AoiType {
	if x != nil {
		return x.Type
	}
	return AoiType_AOI_TYPE_UNSPECIFIED
}

func (x *Aoi) GetDrivingPositions() []*v2.LanePosition {
	if x != nil {
		return x.DrivingPositions
	}
	return nil
}

func (x *Aoi) GetWalkingPositions() []*v2.LanePosition {
	if x != nil {
		return x.WalkingPositions
	}
	return nil
}

func (x *Aoi) GetPositions() []*v2.XYPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *Aoi) GetDrivingGates() []*v2.XYPosition {
	if x != nil {
		return x.DrivingGates
	}
	return nil
}

func (x *Aoi) GetWalkingGates() []*v2.XYPosition {
	if x != nil {
		return x.WalkingGates
	}
	return nil
}

func (x *Aoi) GetArea() float64 {
	if x != nil && x.Area != nil {
		return *x.Area
	}
	return 0
}

// 地图，对应一个地图pb文件或一个地图mongodb collection
type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty" yaml:"header" bson:"header" db:"header"`
	Lanes     []*Lane     `protobuf:"bytes,2,rep,name=lanes,proto3" json:"lanes,omitempty" yaml:"lanes" bson:"lanes" db:"lanes"`
	Roads     []*Road     `protobuf:"bytes,3,rep,name=roads,proto3" json:"roads,omitempty" bson:"roads" db:"roads" yaml:"roads"`
	Junctions []*Junction `protobuf:"bytes,4,rep,name=junctions,proto3" json:"junctions,omitempty" yaml:"junctions" bson:"junctions" db:"junctions"`
	Aois      []*Aoi      `protobuf:"bytes,5,rep,name=aois,proto3" json:"aois,omitempty" db:"aois" yaml:"aois" bson:"aois"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wolong_map_v2_map_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_wolong_map_v2_map_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_wolong_map_v2_map_proto_rawDescGZIP(), []int{8}
}

func (x *Map) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Map) GetLanes() []*Lane {
	if x != nil {
		return x.Lanes
	}
	return nil
}

func (x *Map) GetRoads() []*Road {
	if x != nil {
		return x.Roads
	}
	return nil
}

func (x *Map) GetJunctions() []*Junction {
	if x != nil {
		return x.Junctions
	}
	return nil
}

func (x *Map) GetAois() []*Aoi {
	if x != nil {
		return x.Aois
	}
	return nil
}

var File_wolong_map_v2_map_proto protoreflect.FileDescriptor

var file_wolong_map_v2_map_proto_rawDesc = []byte{
	0x0a, 0x17, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2f, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x32, 0x2f,
	0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x6f, 0x6c, 0x6f, 0x6e,
	0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x1a, 0x17, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67,
	0x2f, 0x67, 0x65, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x3b, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77,
	0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x58, 0x59, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa4,
	0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x65, 0x61, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x77, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x4c, 0x61, 0x6e, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x65, 0x6f,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x31, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x65, 0x6c, 0x66, 0x46, 0x69, 0x72, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x0e, 0x4c, 0x61, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e,
	0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xb7, 0x05, 0x0a, 0x04, 0x4c, 0x61, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e,
	0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x6d,
	0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x04,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x6d, 0x61,
	0x70, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0a, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x70,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0e, 0x6c, 0x65,
	0x66, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x11,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67,
	0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67,
	0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e,
	0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74,
	0x4c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77,
	0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6f, 0x69, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6f, 0x69, 0x49, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x04, 0x52,
	0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x22, 0x35,
	0x0a, 0x08, 0x4a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61,
	0x6e, 0x65, 0x49, 0x64, 0x73, 0x22, 0xb0, 0x03, 0x0a, 0x03, 0x41, 0x6f, 0x69, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x77, 0x6f,
	0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6f, 0x69, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x72, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x65,
	0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x61, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x61, 0x6c,
	0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a,
	0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x76, 0x32,
	0x2e, 0x58, 0x59, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x58, 0x59,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x47, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x58, 0x59,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e,
	0x67, 0x47, 0x61, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x22, 0xe9, 0x01, 0x0a, 0x03, 0x4d, 0x61, 0x70,
	0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x05, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x61, 0x6e, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x6f, 0x6c, 0x6f,
	0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x61, 0x64, 0x52, 0x05,
	0x72, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x6c, 0x6f, 0x6e,
	0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x04,
	0x61, 0x6f, 0x69, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x6c,
	0x6f, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6f, 0x69, 0x52, 0x04,
	0x61, 0x6f, 0x69, 0x73, 0x2a, 0x53, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x41, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x08, 0x4c, 0x61, 0x6e,
	0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x55,
	0x52, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x4e, 0x45,
	0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x41,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x2a, 0x78, 0x0a, 0x12, 0x4c, 0x61, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x20, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10,
	0x02, 0x2a, 0x51, 0x0a, 0x07, 0x41, 0x6f, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x4f, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4f, 0x49, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4f, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x02, 0x42, 0xb3, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x6f, 0x6c,
	0x6f, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x76, 0x32, 0x42, 0x08, 0x4d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x2e, 0x66, 0x69, 0x62, 0x6c,
	0x61, 0x62, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x69, 0x6d, 0x2f, 0x73, 0x69, 0x6d, 0x75, 0x6c,
	0x65, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x2f, 0x77, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2f, 0x6d, 0x61, 0x70, 0x2f, 0x76, 0x32,
	0x3b, 0x6d, 0x61, 0x70, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x57, 0x4d, 0x58, 0xaa, 0x02, 0x0d, 0x57,
	0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x0d, 0x57,
	0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x5c, 0x4d, 0x61, 0x70, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x19, 0x57,
	0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x5c, 0x4d, 0x61, 0x70, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x57, 0x6f, 0x6c, 0x6f, 0x6e,
	0x67, 0x3a, 0x3a, 0x4d, 0x61, 0x70, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_wolong_map_v2_map_proto_rawDescOnce sync.Once
	file_wolong_map_v2_map_proto_rawDescData = file_wolong_map_v2_map_proto_rawDesc
)

func file_wolong_map_v2_map_proto_rawDescGZIP() []byte {
	file_wolong_map_v2_map_proto_rawDescOnce.Do(func() {
		file_wolong_map_v2_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_wolong_map_v2_map_proto_rawDescData)
	})
	return file_wolong_map_v2_map_proto_rawDescData
}

var file_wolong_map_v2_map_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_wolong_map_v2_map_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_wolong_map_v2_map_proto_goTypes = []interface{}{
	(LaneType)(0),           // 0: wolong.map.v2.LaneType
	(LaneTurn)(0),           // 1: wolong.map.v2.LaneTurn
	(LaneConnectionType)(0), // 2: wolong.map.v2.LaneConnectionType
	(AoiType)(0),            // 3: wolong.map.v2.AoiType
	(*Polyline)(nil),        // 4: wolong.map.v2.Polyline
	(*Header)(nil),          // 5: wolong.map.v2.Header
	(*LaneOverlap)(nil),     // 6: wolong.map.v2.LaneOverlap
	(*LaneConnection)(nil),  // 7: wolong.map.v2.LaneConnection
	(*Lane)(nil),            // 8: wolong.map.v2.Lane
	(*Road)(nil),            // 9: wolong.map.v2.Road
	(*Junction)(nil),        // 10: wolong.map.v2.Junction
	(*Aoi)(nil),             // 11: wolong.map.v2.Aoi
	(*Map)(nil),             // 12: wolong.map.v2.Map
	(*v2.XYPosition)(nil),   // 13: wolong.geo.v2.XYPosition
	(*v2.LanePosition)(nil), // 14: wolong.geo.v2.LanePosition
}
var file_wolong_map_v2_map_proto_depIdxs = []int32{
	13, // 0: wolong.map.v2.Polyline.nodes:type_name -> wolong.geo.v2.XYPosition
	14, // 1: wolong.map.v2.LaneOverlap.self:type_name -> wolong.geo.v2.LanePosition
	14, // 2: wolong.map.v2.LaneOverlap.other:type_name -> wolong.geo.v2.LanePosition
	2,  // 3: wolong.map.v2.LaneConnection.type:type_name -> wolong.map.v2.LaneConnectionType
	0,  // 4: wolong.map.v2.Lane.type:type_name -> wolong.map.v2.LaneType
	1,  // 5: wolong.map.v2.Lane.turn:type_name -> wolong.map.v2.LaneTurn
	4,  // 6: wolong.map.v2.Lane.center_line:type_name -> wolong.map.v2.Polyline
	4,  // 7: wolong.map.v2.Lane.left_border_line:type_name -> wolong.map.v2.Polyline
	4,  // 8: wolong.map.v2.Lane.right_border_line:type_name -> wolong.map.v2.Polyline
	7,  // 9: wolong.map.v2.Lane.predecessors:type_name -> wolong.map.v2.LaneConnection
	7,  // 10: wolong.map.v2.Lane.successors:type_name -> wolong.map.v2.LaneConnection
	6,  // 11: wolong.map.v2.Lane.overlaps:type_name -> wolong.map.v2.LaneOverlap
	3,  // 12: wolong.map.v2.Aoi.type:type_name -> wolong.map.v2.AoiType
	14, // 13: wolong.map.v2.Aoi.driving_positions:type_name -> wolong.geo.v2.LanePosition
	14, // 14: wolong.map.v2.Aoi.walking_positions:type_name -> wolong.geo.v2.LanePosition
	13, // 15: wolong.map.v2.Aoi.positions:type_name -> wolong.geo.v2.XYPosition
	13, // 16: wolong.map.v2.Aoi.driving_gates:type_name -> wolong.geo.v2.XYPosition
	13, // 17: wolong.map.v2.Aoi.walking_gates:type_name -> wolong.geo.v2.XYPosition
	5,  // 18: wolong.map.v2.Map.header:type_name -> wolong.map.v2.Header
	8,  // 19: wolong.map.v2.Map.lanes:type_name -> wolong.map.v2.Lane
	9,  // 20: wolong.map.v2.Map.roads:type_name -> wolong.map.v2.Road
	10, // 21: wolong.map.v2.Map.junctions:type_name -> wolong.map.v2.Junction
	11, // 22: wolong.map.v2.Map.aois:type_name -> wolong.map.v2.Aoi
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_wolong_map_v2_map_proto_init() }
func file_wolong_map_v2_map_proto_init() {
	if File_wolong_map_v2_map_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wolong_map_v2_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polyline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolong_map_v2_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolong_map_v2_map_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaneOverlap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolong_map_v2_map_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaneConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolong_map_v2_map_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lane); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolong_map_v2_map_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Road); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolong_map_v2_map_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Junction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolong_map_v2_map_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aoi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wolong_map_v2_map_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wolong_map_v2_map_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wolong_map_v2_map_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wolong_map_v2_map_proto_goTypes,
		DependencyIndexes: file_wolong_map_v2_map_proto_depIdxs,
		EnumInfos:         file_wolong_map_v2_map_proto_enumTypes,
		MessageInfos:      file_wolong_map_v2_map_proto_msgTypes,
	}.Build()
	File_wolong_map_v2_map_proto = out.File
	file_wolong_map_v2_map_proto_rawDesc = nil
	file_wolong_map_v2_map_proto_goTypes = nil
	file_wolong_map_v2_map_proto_depIdxs = nil
}
